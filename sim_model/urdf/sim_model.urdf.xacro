<?xml version="1.0"?>
<!-- The castor wheel functionality - Credits for the Toronto Robotics Clud
  https://github.com/Toronto-Robotics-club/Gazebo_caster_sample/blob/master/jimmy_description/urdf/jimmy.xacro
 -->
 
<robot name="macroed" xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="pi" value="3.1415926535897931" />

  <!--base link values-->
  <xacro:property name="base_link_length_width_height" value="0.650 0.381 0.132" />
  <xacro:property name="base_link_length" value="1" /> 
  <xacro:property name="base_link_width" value="0.7" />
  <xacro:property name="base_link_height" value="0.2" />
  <xacro:property name="base_link_mass" value="20"/> <!--25 kg-->

  <!--left and right castor mount plate size (both are same size)-->
  <xacro:property name="castor_mount_link_length_width_height" value="0.1145 0.10 0.0057" />
  <xacro:property name="castor_mount_link_length" value="0.1145" />
  <xacro:property name="castor_mount_link_width" value="0.10" />
  <xacro:property name="castor_mount_link_height" value="0.0057" />
  <xacro:property name="castor_mount_link_mass" value="0.25"/> <!--0.25 kg-->

  <!--dummy link to give castors rotation about the Z axis-->
  <xacro:property name="castor_mount_dummy_link_length" value="0.02" />
  <xacro:property name="castor_mount_dummy_link_width" value="0.02" />
  <xacro:property name="castor_mount_dummy_link_height" value="0.02" />
  <xacro:property name="castor_mount_dummy_link_mass" value="1.5"/> <!--0.25 kg-->

  <!--Friction for joints-->
  <xacro:property name="friction_val" value="0.15"/>

  <!--Other properties-->
  <xacro:property name="rear_wheel_radius" value="0.15" />
  <xacro:property name="front_wheel_radius" value="0.10" />
  <xacro:property name="rear_wheel_length" value="0.1" />
  <xacro:property name="front_wheel_length" value="0.1" />
  <xacro:property name="rear_wheel_mass" value="8" />
  <xacro:property name="front_wheel_mass" value="5" />  
  <xacro:property name="base_z" value="0" />
  <xacro:property name="joint_friction" value="0.15" />
  <xacro:property name="joint_castor_friction" value="0.15" />

<!-- Material colors definition -->
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>

<!-- Defining the robot base -->
  <link name="base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 ${base_z}"/>
      <geometry>
        <box size="1 0.7 0.2"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="1 0.7 0.2"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="${base_link_mass}"/>
      <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
      <!--where x=length; y=width; z=height. these lines of code came from Emiliano Borghi's project-->      
      <inertia
        ixx="${base_link_mass*(base_link_width*base_link_width+base_link_height*base_link_height)/12}" 
        ixy="0" 
        ixz="0"
        iyy="${base_link_mass*(base_link_length*base_link_length+base_link_height*base_link_height)/12}" 
        iyz="0"
        izz="${base_link_mass*(base_link_length*base_link_length+base_link_height*base_link_height)/12}"/>      
    </inertial>    
  </link>


<!-- Defining the robot base back -->
  <link name="base_back">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 ${base_z}"/>
      <geometry>
        <box size="0.20 0.6 0.8"/>
      </geometry>
      <material name="white"/>
    </visual>
    <collision>
      <geometry>
        <box size="1 0.2 1"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="10"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>       
  </link>
  
  <joint name="base_back_joint" type="fixed">
    <parent link="base_link"/>
    <child link="base_back"/>
    <origin xyz="-0.40 0 0.50"/>
  </joint> 

<!-- Defining the robot rear wheels -->
  <xacro:macro name="rear_wheel" params="prefix suffix reflect mass radius length">

    <link name="${prefix}_${suffix}_wheel">
      <visual>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${radius}" length="${length}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${radius}" length="${length}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
      </collision>
      <inertial>
        <mass value="${mass}"/>  
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <inertia
            ixx="${mass*(3*radius*radius+length*length)/12}" 
            ixy = "0" 
            ixz = "0"
            iyy="${mass*(3*radius*radius+length*length)/12}" 
            iyz = "0"
            izz="${mass*radius*radius/2}"
          />
      </inertial>
      <!-- <inertial>
        <mass value="10"/>
        <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
      </inertial> -->
      <!-- <xacro:default_inertial mass="1"/> -->
    </link>
    
    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_${suffix}_wheel"/>
      <origin xyz="${-0.35} ${reflect*0.4} ${-0.17}"/>
      <dynamics damping="0.0" friction="${joint_friction}"/> 
      <!-- <origin xyz="${baselen*reflect/3} 0 -${wheeldiam/2+.05}" rpy="0 0 0"/> -->
    </joint>
    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${prefix}_${suffix}_wheel">
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="${prefix}_${suffix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${prefix}_${suffix}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>
  </xacro:macro>

<!-- Defining the robot front wheels -->
  <xacro:macro name="front_wheel" params="prefix suffix reflect mass radius length">

    <link name="${prefix}_${suffix}_wheel">
      <visual>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
        <geometry>
          <cylinder radius="${radius}" length="${radius}"/>
        </geometry>
        <material name="black"/>
      </visual>
      <collision>
        <geometry>
          <cylinder radius="${radius}" length="${radius}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
      </collision>
      <inertial>
        <mass value="${mass}"/>  
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <inertia
            ixx="${mass*(3*radius*radius+length*length)/12}" 
            ixy = "0" 
            ixz = "0"
            iyy="${mass*(3*radius*radius+length*length)/12}" 
            iyz = "0"
            izz="${mass*radius*radius/2}"
          />
      </inertial>      
    </link>

    <joint name="${prefix}_${suffix}_wheel_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="${prefix}_castor_dummy"/>
      <child link="${prefix}_${suffix}_wheel"/>
      <origin xyz="0 0 -0.12"/>
      <dynamics damping="0.0" friction="${joint_friction}"/> 
      <!-- <origin xyz="${baselen*reflect/3} 0 -${wheeldiam/2+.05}" rpy="0 0 0"/> -->
    </joint>

    <!-- This block provides the simulator (Gazebo) with information on a few additional
    physical properties. See http://gazebosim.org/tutorials/?tut=ros_urdf for more-->
    <gazebo reference="${prefix}_${suffix}_wheel">
      <mu1 value="200.0"/>
      <mu2 value="100.0"/>
      <kp value="10000000.0" />
      <kd value="1.0" />
      <material>Gazebo/Grey</material>
    </gazebo>

    <!-- This block connects the wheel joint to an actuator (motor), which informs both
    simulation and visualization of the robot -->
    <transmission name="${prefix}_${suffix}_wheel_trans">
      <type>transmission_interface/SimpleTransmission</type>
      <actuator name="${prefix}_${suffix}_wheel_motor">
        <mechanicalReduction>1</mechanicalReduction>
      </actuator>
      <joint name="${prefix}_${suffix}_wheel_joint">
        <hardwareInterface>VelocityJointInterface</hardwareInterface>
      </joint>
    </transmission>
  </xacro:macro>

  <!-- Defining the castor mount -->
  <xacro:macro name="castor_mount" params="prefix reflect length width height material mass">
    <link name="${prefix}_castor_mount">
      <collision>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
      </collision>
      <visual>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="0 0 0" />
        <material name="${material}"/>
      </visual>
      <inertial>
        <origin xyz="0 0 ${base_z}" rpy="0 0 0" />
        <mass value="${mass}"/>
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
        <inertia
          ixx="${mass*(width*width+height*height)/12}" 
    	    ixy = "0" 
    	    ixz = "0"
    	    iyy="${mass*(length*length+height*height)/12}" 
    	    iyz = "0"
    	    izz="${mass*(length*length+height*height)/12}"/>
      </inertial>      
      
    </link>
    <joint name="${prefix}_castor_mount_joint" type="fixed">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="base_link"/>
      <child link="${prefix}_castor_mount"/>
      <origin xyz="${0.35} ${reflect*0.30} ${-0.10}"/>
      <!-- <origin xyz="${baselen*reflect/3} 0 -${wheeldiam/2+.05}" rpy="0 0 0"/> -->
    </joint>
  </xacro:macro>

  <!-- Defining the castor dummy for Z axis rotation -->
  <xacro:macro name="castor_dummy" params="prefix reflect length width height material mass">
    <link name="${prefix}_castor_dummy">
      <collision>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="${pi/2} 0 0" />
      </collision>
      <visual>
        <geometry>
          <box size="${length} ${width} ${height}"/>
        </geometry>
        <origin xyz="0 0 ${base_z}" rpy="0 0 0" />
        <material name="${material}"/>
      </visual>
      <inertial>
        <origin xyz="0 0 ${base_z}" rpy="0 0 0" />
        <mass value="${mass}"/>
        <!--This is the 3x3 inertial matrix. See: https://wiki.ros.org/urdf/XML/link -->
        <!--where x=length; y=width; z=height. these lines of code came from 
        Emiliano Borghi's project-->
        <inertia
          ixx="${mass*(width*width+height*height)/12}" 
    	    ixy = "0" 
    	    ixz = "0"
    	    iyy="${mass*(length*length+height*height)/12}" 
    	    iyz = "0"
    	    izz="${mass*(length*length+height*height)/12}"/>
      </inertial>      
      
    </link>
    <joint name="${prefix}_castor_dummy_joint" type="continuous">
      <axis xyz="0 0 1" rpy="0 0 0" />
      <parent link="${prefix}_castor_mount"/>
      <child link="${prefix}_castor_dummy"/>
      <origin xyz="0 0 -0.01"/>
      <dynamics damping="0.0" friction="${joint_castor_friction}"/> 
      <!-- <origin xyz="${baselen*reflect/3} 0 -${wheeldiam/2+.05}" rpy="0 0 0"/> -->
    </joint>
  </xacro:macro>

  <!-- Setting the rear right wheel -->
  <xacro:rear_wheel prefix="right" suffix="rear" reflect="-1" mass="${rear_wheel_mass}" radius="${rear_wheel_radius}" length="${rear_wheel_length}"/>
  <!-- Setting the rear left wheel -->
  <xacro:rear_wheel prefix="left" suffix="rear" reflect="1" mass="${rear_wheel_mass}"  radius="${rear_wheel_radius}" length="${rear_wheel_length}"/>
  <!-- Setting the castor mount left wheel -->
  <xacro:castor_mount prefix="left" reflect="1" length="${castor_mount_link_length}" 
                                                width="${castor_mount_link_width}" 
                                                height="${castor_mount_link_height}" 
                                                material="white"
                                                mass="${castor_mount_link_mass}"/>
  <!-- Setting the castor mount right wheel -->
  <xacro:castor_mount prefix="right" reflect="-1" length="${castor_mount_link_length}" 
                                                width="${castor_mount_link_width}" 
                                                height="${castor_mount_link_height}" 
                                                material="white"
                                                mass="${castor_mount_link_mass}"/>                                                
  <!-- Setting the castor dummy left wheel -->
  <xacro:castor_dummy prefix="left" reflect="1" length="${castor_mount_dummy_link_length}" 
                                                width="${castor_mount_dummy_link_width}" 
                                                height="${castor_mount_dummy_link_height}" 
                                                material="orange"
                                                mass="${castor_mount_dummy_link_mass}"/>
  <!-- Setting the castor dummy left wheel -->
  <xacro:castor_dummy prefix="right" reflect="-1" length="${castor_mount_dummy_link_length}" 
                                                width="${castor_mount_dummy_link_width}" 
                                                height="${castor_mount_dummy_link_height}" 
                                                material="orange"
                                                mass="${castor_mount_dummy_link_mass}"/>                                                
 

  <!-- Setting the front right wheel -->
  <xacro:front_wheel prefix="right" suffix="front" reflect="-1" mass="${front_wheel_mass}"  radius="${front_wheel_radius}" length="${front_wheel_length}"/>
  <!-- Setting the front left wheel -->
  <xacro:front_wheel prefix="left" suffix="front" reflect="1" mass="${front_wheel_mass}"  radius="${front_wheel_radius}" length="${front_wheel_length}"/>

  <!-- Kinect definition -->
  <gazebo reference="camera_depth_frame">
    <sensor name="camera1" type="depth">
      <always_on>true</always_on>
      <update_rate>20.0</update_rate>
      <camera>
        <horizontal_fov>1.0471975512</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.05</near>
          <far>8.0</far>
        </clip>
      </camera>
      <plugin filename="libgazebo_ros_openni_kinect.so" name="camera_depth_frame_kinect_controller">
        <baseline>0.1</baseline>
        <alwaysOn>true</alwaysOn>
        <updateRate>10</updateRate>
        <cameraName>camera1</cameraName>
        <imageTopicName>/camera/color/image_raw</imageTopicName>
        <cameraInfoTopicName>/camera/color/camera_info</cameraInfoTopicName>
        <depthImageTopicName>/camera/depth/image_raw</depthImageTopicName>
        <depthImageCameraInfoTopicName>/camera/depth/camera_info</depthImageCameraInfoTopicName>
        <pointCloudTopicName>/camera/depth/points</pointCloudTopicName>
        <frameName>camera_depth_optical_frame</frameName>
        <pointCloudCutoff>0.5</pointCloudCutoff>
        <pointCloudCutoffMax>3.0</pointCloudCutoffMax>
        <distortion_k1>0.0</distortion_k1>
        <distortion_k2>0.0</distortion_k2>
        <distortion_k3>0.0</distortion_k3>
        <distortion_t1>0.0</distortion_t1>
        <distortion_t2>0.0</distortion_t2>
        
        <!-- <CxPrime>0</CxPrime>
        <Cx>0</Cx>
        <Cy>0</Cy>
        <focalLength>0</focalLength>
        <hackBaseline>0</hackBaseline> -->
       
      </plugin>
    </sensor>
  </gazebo>

  <!-- Parameterised in part by the values in kinect_properties.urdf.xacro -->
  <joint name="camera_rgb_joint" type="fixed">
    <!-- <origin rpy="0 0 0" xyz="-0.30 0.2 0.95"/> -->
    <origin rpy="0 0 0" xyz="0.50 0.2 0.15"/>
    <parent link="base_link"/>
    <child link="camera_rgb_frame"/>
  </joint>

  <link name="camera_rgb_frame">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>
  
  <joint name="camera_rgb_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_rgb_optical_frame"/>
  </joint>

  <link name="camera_rgb_optical_frame">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <joint name="camera_joint" type="fixed">
    <origin rpy="0 0 0" xyz="-0.031 -0.0 -0.016"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_link"/>
  </joint>

  <link name="camera_link">
    <visual>
      <origin rpy="0.0 0 1.57079632679" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://robot_cognition_system/sim_model/meshes/kinect.dae"/>
      </geometry>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0.0 0.0 0.0"/>
      <geometry>
        <box size="0.07271 0.27794 0.073"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <!-- The fixed joints & links below are usually published by static_transformers launched by the OpenNi launch 
		 files. However, for Gazebo simulation we need them, so we add them here.
		 (Hence, don't publish them additionally!) -->
  <joint name="camera_depth_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0 0.0 0"/>
    <parent link="camera_rgb_frame"/>
    <child link="camera_depth_frame"/>
  </joint>

  <link name="camera_depth_frame">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

  <joint name="camera_depth_optical_joint" type="fixed">
    <origin rpy="-1.57079632679 0 -1.57079632679" xyz="0 0 0"/>
    <parent link="camera_depth_frame"/>
    <child link="camera_depth_optical_frame"/>
  </joint>

  <link name="camera_depth_optical_frame">
    <inertial>
      <mass value="0.001"/>
      <origin xyz="0 0 0"/>
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0" iyy="0.0001" iyz="0.0" izz="0.0001"/>
    </inertial>
  </link>

<!-- Laser Pointer Definition -->
 <gazebo reference="hokuyo_link">

    <sensor type="ray" name="head_hokuyo_sensor">
      <pose>0 0 0 0 0 0</pose>
      <visualize>true</visualize>
      <update_rate>40</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <!-- <min_angle>-1.570796</min_angle>
            <max_angle>1.570796</max_angle> -->
            <min_angle>-0.01</min_angle>
            <max_angle>0.01</max_angle>            
          </horizontal>
        </scan>
        <range>
          <min>0.10</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
        <noise>
          <type>gaussian</type>
          <!-- Noise parameters based on published spec for Hokuyo laser
               achieving "+-30mm" accuracy at range < 10m.  A mean of 0.0m and
               stddev of 0.01m will put 99.7% of samples within 0.03m of the true
               reading. -->
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_laser.so">
        <topicName>/laser/pointer</topicName>
        <frameName>hokuyo_link</frameName>
      </plugin>
    </sensor>
  </gazebo>

  <joint name="hokuyo_joint" type="continuous">
    <axis xyz="0 1 0" />
    <!-- <origin xyz="0 0 ${height3 - axel_offset/2}" rpy="0 0 0"/> -->
    <limit lower="-${3.1}" upper="${3.1}"  effort="50" velocity="1"/>
    <origin xyz="0.0 0.0 0.0" rpy="0 0 0"/>
    <parent link="hokuyo_base_link"/>
    <child link="hokuyo_link"/>
  </joint>

  <joint name="hokuyo_joint_pan" type="continuous">
    <axis xyz="0 0 1" />
    <!-- <origin xyz="0 0 ${height3 - axel_offset/2}" rpy="0 0 0"/> -->
    <limit lower="-${3.15/2}" upper="${3.15/2}"  effort="50" velocity="1"/>
    <origin xyz="0.50 -0.20 0.15" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="hokuyo_base_link"/>
  </joint>  

  <link name="hokuyo_link">
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
    <box size="0.1 0.1 0.1"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 0" rpy="0 0.0 0.0"/>
      <geometry>
        <mesh filename="package://robot_cognition_system/sim_model/meshes/hokuyo.dae"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>
  </link>

  <link name="hokuyo_base_link">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
      <material name="black"/>
    </visual>
    <collision>
      <geometry>
        <box size="0.02 0.02 0.02"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="1e-5" />
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
    </inertial>      
  </link>


  <transmission name="laser_trans_tilt">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="laser_motor_tilt">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="hokuyo_joint">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
  </transmission>

  <transmission name="laser_trans_pan">
    <type>transmission_interface/SimpleTransmission</type>
    <actuator name="laser_motor_pan">
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
    <joint name="hokuyo_joint_pan">
      <hardwareInterface>PositionJointInterface</hardwareInterface>
    </joint>
  </transmission>






<!-- Gazebo plugin for ROS Control -->
  

  <gazebo>
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>/</robotNamespace>
    </plugin>
  </gazebo>

</robot>
